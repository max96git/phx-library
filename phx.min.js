class PHX {
    static Scene() {
        return new Scene();
    }
    static Camera(config) {
        return new Camera(config);
    }
    static Renderer(config) {
        return new Renderer(config);
    }
    static Mesh(geometry, material) {
        return new Mesh(geometry, material);
    }
    static BoxGeometry(width, height, depth) {
        return new BoxGeometry(width, height, depth);
    }
    static Material(config) {
        return new Material(config);
    }
    static PhysicsWorld(config) {
        return new PhysicsWorld(config);
    }
    static RigidBody(config) {
        return new RigidBody(config);
    }
    static ParticleSystem(config) {
        return new ParticleSystem(config);
    }
}

class Scene {
    constructor() {
        this.objects = [];
    }
    add(obj) {
        this.objects.push(obj);
    }
}
class Camera {
    constructor({ fov, aspect, near, far }) {
        this.fov = fov;
        this.aspect = aspect;
        this.near = near;
        this.far = far;
    }
}
class Renderer {
    constructor({ antialias }) {
        this.canvas = document.createElement("canvas");
        this.context = this.canvas.getContext("webgl", { antialias });
        this.domElement = this.canvas;
    }
    setSize(width, height) {
        this.canvas.width = width;
        this.canvas.height = height;
    }
    render(scene, camera) {
        this.context.clearColor(0, 0, 0, 1);
        this.context.clear(this.context.COLOR_BUFFER_BIT);
    }
}
class Mesh {
    constructor(geometry, material) {
        this.geometry = geometry;
        this.material = material;
    }
}
class BoxGeometry {
    constructor(width, height, depth) {
        this.width = width;
        this.height = height;
        this.depth = depth;
    }
}
class Material {
    constructor({ color }) {
        this.color = color;
    }
}
class PhysicsWorld {
    constructor({ gravity }) {
        this.gravity = gravity;
        this.bodies = [];
    }
    addBody(body) {
        this.bodies.push(body);
    }
}
class RigidBody {
    constructor({ mass, shape, position }) {
        this.mass = mass;
        this.shape = shape;
        this.position = position;
    }
}
class ParticleSystem {
    constructor({ count, color }) {
        this.count = count;
        this.color = color;
    }
}
